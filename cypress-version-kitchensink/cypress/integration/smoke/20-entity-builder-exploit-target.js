import { cypressAdmin } from '../../support/constants';
import generate from '../../support/generate';
import {
    Clickable,
    Section,
    DetailPane,
    Form,
    Dropdown,
    Search,
    Table,
    TableRow,
} from '../../support/high-level-api/testables';
import apiConnect from '../../support/api/api-connect';
import { createGroup } from '../../support/groups/helper';

const uniqueName = `CyExT-${generate.randomNumber()}`;
const api = apiConnect(cypressAdmin);

describe('entity builder exploit-target', () => {
    let source;
    before(() => {
        cy.login(cypressAdmin.username, cypressAdmin.password);
        createGroup().then(group => {
            source = group;
        });
    });

    after(() => {
        api.delete(`groups/${source.id}`);
        cy.logout();
    });

    beforeEach(() => {
        cy.clearWorkInProgress();
    });

    describe('Check entity builder for exploit-target form from left panel', () => {
        it('should be able to create a new exploit target with only mandatory fields filled in', () => {
            const exploitChars = ['Configuration', 'Weakness'];
            cy.visit('/main/intel/all/production/add/exploit-target');
            cy.with(Form).do(
                Form.fill({
                    Title: uniqueName,
                    Analysis: 'CyExT Company',
                    Description: 'CyExT info',
                    Identity: 'CyExT ID',
                    Roles: ['Select all options'],
                    Source: source.name,
                    TLP: 'Green',
                    'Terms of use': 'Used with cypress',
                    'Half-life': 250,
                    References: ['https://localhost8888.ext'],
                    'Estimated observed time': '2020-11-13',
                    'Estimated threat end time': '2021-11-13',
                    'Estimated threat start time': '2020-11-05T06:08:00+01:00',
                }),
            );
            for (let i = 0; i < exploitChars.length; i++) {
                openExploitCharacteristic(exploitChars[i]);
            }
            openVulnerabilityCharacteristic();
            cy.with(Form).do(Form.submit());
        });
        it('should be able to find created entity', () => {
            cy.with(Search).do(Search.search(uniqueName));
            cy.with(Table)
                .with(TableRow, 'Name', uniqueName)
                .click();
            cy.with(DetailPane)
                .do(DetailPane.getTitle())
                .should('contain', uniqueName);
        });
    });
});

function openExploitCharacteristic(type) {
    cy.with(Section, 'Characteristics')
        .with(Dropdown)
        .do(Dropdown.select(type));
    cy.activeCharacteristic().then(el => {
        if (type === 'Configuration') {
            cy.wrap(el)
                .find('[name="cce_id"]')
                .type('CCE-')
                .type(randomCCENumber())
                .type('-1');
            cy.wrap(el)
                .find('[name="description"]')
                .type('Cypress exploit Config Description');
        } else {
            cy.wrap(el)
                .find('[name="cwe_id"]')
                .type(generate.randomNumber());
            cy.wrap(el)
                .find('[name="description"]')
                .type('Cypress exploit Weakness Description');
        }
        cy.get('.collapse--active .collapse__title').click();
    });
}

function openVulnerabilityCharacteristic() {
    const scoreCVSS = [
        'overall_score',
        'base_score',
        'base_vector',
        'temporal_score',
        'environmental_score',
        'temporal_vector',
        'environmental_vector',
    ];

    const affectedSowftware = [
        'product',
        'language',
        'edition',
        'update',
        'vendor',
        'version',
        'device_manufacturer',
        'device_model',
        'device_serial_number',
        'device_firmware_version',
        'device_system_os',
    ];

    cy.with(Section, 'Characteristics')
        .with(Dropdown)
        .do(Dropdown.select('Vulnerability'));

    cy.activeCharacteristic().then(el => {
        cy.wrap(el)
            .find('[name="title"]')
            .type('Cypress Exploit Vulnerability')
            .get('[name="is_known"]')
            .check()
            .get('[name="is_publicly_acknowledged"]')
            .check();
        cy.wrap(el)
            .find('[name="description"]')
            .type('Vulnerability Description');
        cy.wrap(el)
            .find('[name="source"]')
            .type('Cypress');
        cy.wrap(el)
            .find('[data-test="discovered_datetime"] [name="date"]')
            .type('10/10/2010')
            .click();
        cy.wrap(el)
            .find('[data-test="published_datetime"] [name="date"]')
            .type('10/10/2020')
            .click();
        cy.wrap(el)
            .find('[data-test="discovered_datetime_precision"]')
            .selectChoose('year');
        cy.wrap(el)
            .find('[data-test="published_datetime_precision"]')
            .selectChoose('month');
        cy.wrap(el)
            .find('[name="cve_id"]')
            .type('CVE-')
            .type(randomCCENumber())
            .type('-')
            .type(randomCCENumber());
        cy.wrap(el)
            .find('[name="osvdb_id"]')
            .type(generate.randomNumber());
        for (let i = 0; i < scoreCVSS.length; i++) {
            cy.log(scoreCVSS[i]);
            if (scoreCVSS[i] === 'temporal_vector') {
                cy.wrap(el)
                    .find(`[name="cvss_score[${scoreCVSS[i]}]"]`)
                    .type('E:U/RL:U/RC:UC');
            } else if (scoreCVSS[i] === 'base_vector') {
                cy.wrap(el)
                    .find(`[name="cvss_score[${scoreCVSS[i]}]"]`)
                    .type('AV:N/AC:H/Au:M/C:N/I:N/A:N');
            } else if (scoreCVSS[i] === 'environmental_vector') {
                cy.wrap(el)
                    .find(`[name="cvss_score[${scoreCVSS[i]}]"]`)
                    .type('CDP:N/TD:H/CR:H/IR:L/AR:H');
            } else {
                cy.wrap(el)
                    .find(`[name="cvss_score[${scoreCVSS[i]}]"]`)
                    .type(randomRate());
            }
        }
        for (let i = 0; i < affectedSowftware.length; i++) {
            cy.wrap(el)
                .find(`[name="affected_software[${affectedSowftware[i]}]"]`)
                .type(generate.randomNumber());
        }
        cy.wrap(el)
            .find('[placeholder="Type and press enter to add... e.g. http://www.example.com/page.html"]')
            .type('https://localhost.iw');
    });
}

function randomCCENumber() {
    const { random, floor } = Math;
    return floor(1000 + random() * 8999);
}

function randomRate() {
    return (Math.random() * (0.1 - 0.9) + 0.9).toFixed(1);
}
